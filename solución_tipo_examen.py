# -*- coding: utf-8 -*-
"""Solución Tipo Examen.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gxLrdJYeroPQ60CQee8fW-6N_AZ1-_Sf
"""

import random
import csv

# Lista de productos
lista_productos = [
    "Televisor LED", "Laptop", "Teléfono móvil", "Tablet", "Cámara digital",
    "Reproductor de música", "Impresora", "Auriculares inalámbricos",
    "Micrófono profesional", "Robot aspirador"
]

# Lista para almacenar los productos con sus características
inventario = []

# Función para asignar precios aleatorios y cantidades aleatorias en inventario
def asignar_precios_y_cantidad():
    for producto in lista_productos:
        precio = random.randint(100000, 500000)  # Precio aleatorio entre $100,000 y $500,000 CLP
        cantidad = random.randint(1, 50)  # Cantidad aleatoria en inventario entre 1 y 50 unidades
        inventario.append({'nombre': producto, 'precio': precio, 'cantidad': cantidad})

# Función para clasificar productos
def clasificar_productos():

    if not inventario:
        print("No hay productos en el inventario.")
        return

    baratos = []
    moderados = []
    caros = []

    for producto in inventario:
        precio = producto['precio']
        if precio < 200000:
            baratos.append(producto['nombre'])
        elif 200000 <= precio <= 400000:
            moderados.append(producto['nombre'])
        else:
            caros.append(producto['nombre'])

    # Imprimir productos clasificados
    print("\nProductos clasificados:")
    print(f"Baratos (< $200,000 CLP): {baratos}")
    print(f"Moderados ($200,000 - $400,000 CLP): {moderados}")
    print(f"Caros (> $400,000 CLP): {caros}")

# Función para mostrar estadísticas de productos con cálculos separados
def mostrar_estadisticas():
    if not inventario:
        print("No hay productos en el inventario.")
        return

    # Inicialización de listas para almacenar precios y cantidades
    precios = []
    cantidades = []

    # Encontrar el producto más caro y más barato
    producto_mas_caro = inventario[0]
    producto_mas_barato = inventario[0]

    for producto in inventario:
        precios.append(producto['precio'])
        cantidades.append(producto['cantidad'])

        if producto['precio'] > producto_mas_caro['precio']:
            producto_mas_caro = producto

        if producto['precio'] < producto_mas_barato['precio']:
            producto_mas_barato = producto

    # Calcular suma de precios
    suma_precios = sum(precios)

    # Calcular promedio de precios
    cantidad_productos = len(precios)
    promedio_precios = suma_precios / cantidad_productos if cantidad_productos > 0 else 0

    # Calcular producto media geométrica de cantidades
    producto_media_geom = 1
    for cantidad in cantidades:
        producto_media_geom *= cantidad

    # Calcular media geométrica de cantidades
    media_geom_cantidades = (producto_media_geom) ** (1 / len(cantidades)) if len(cantidades) > 0 else 0

    # Calcular valor total del inventario
    valor_total_inventario = sum(producto['precio'] * producto['cantidad'] for producto in inventario)

    # Imprimir estadísticas
    print("\nEstadísticas de productos:")
    print(f"Producto más caro: {producto_mas_caro['nombre']} (${producto_mas_caro['precio']} CLP)")
    print(f"Producto más barato: {producto_mas_barato['nombre']} (${producto_mas_barato['precio']} CLP)")
    print(f"Promedio de precios: ${promedio_precios:.2f} CLP")
    print(f"Media geométrica de cantidades en inventario: {media_geom_cantidades:.2f}")
    print(f"Valor total del inventario: ${valor_total_inventario:.2f} CLP")

# Función para generar reporte de productos y guardar en archivo CSV
def generar_reporte():
    with open('reporte_productos.csv', mode='w', newline='') as file:
        writer = csv.writer(file)
        writer.writerow(['Nombre del producto', 'Precio unitario', 'Cantidad en inventario', 'Descuento tienda (10%)', 'Descuento producto nuevo (7%)', 'Valor total con descuentos'])

        for producto in inventario:
            precio = producto['precio']
            cantidad = producto['cantidad']
            descuento_tienda = precio * 0.1
            descuento_producto_nuevo = precio * 0.07
            valor_total_descuentos = precio - descuento_tienda - descuento_producto_nuevo

            writer.writerow([producto['nombre'], precio, cantidad, descuento_tienda, descuento_producto_nuevo, valor_total_descuentos])

# Función para mostrar el menú y manejar las opciones
def mostrar_menu():
    while True:
        print("\nMenu:")
        print("1. Asignar Precios Aleatorios a Productos")
        print("2. Clasificar Productos")
        print("3. Ver Estadísticas")
        print("4. Reporte de Productos")
        print("5. Salir del Programa")

        opcion = input("Ingrese el número de la opción que desea ejecutar: ")

        if opcion.isnumeric():
            opcion = int(opcion)
            if opcion == 1:
                asignar_precios_y_cantidad()
                print("Se han asignado precios aleatorios a los productos.")
            elif opcion == 2:
                clasificar_productos()
            elif opcion == 3:
                mostrar_estadisticas()
            elif opcion == 4:
                generar_reporte()
                print("\nSe ha generado el reporte de productos en 'reporte_productos.csv'.")
            elif opcion == 5:
                print("Saliendo del programa...")
                break
            else:
                print("Opción no válida. Por favor, ingrese un número del 1 al 5.")
        else:
            print("Error: Por favor, ingrese un número del 1 al 5.")

# Llamamos a la función mostrar_menu() para iniciar la aplicación
mostrar_menu()